#pragma once

#include <QSharedPointer>

#include "feature.h"
#include "histogram.h"
#include "somerror.h"

#include "opencv2/core/core.hpp"

namespace hsom {

///** This abstract base class provides the basic functionality for a HSOM suspect
class Suspect
{

protected:

    /// The total number of categories into which the suspects may be classified
    static int _categoryCount;

    /// The category that this Suspect is predicted to be
    int _predCategory;

    /// The actual category of this suspect
    int _realCategory;

    /// A histogram of SOM responses for this suspect
    HistogramPtr _histogram;

    /// A vector of responses from the HSOM
    QVector<double> _classification;

    /// A vector of the features generated by this suspect.
    QVector<FeaturePtr> _features;



public:

    /// Sets the total number of categories into which the suspects may be classified
    static void setCatergoryCount( int count );

    /// Fetches the total number of categories into which the suspects may be classified
    static void categoryCount();

    /// Constructs a new Suspect
    Suspect();

    /// Destructs this Suspect
    virtual ~Suspect();

    /// Generates the features from this Suspect
    virtual void generateFeatures() = 0;

    /// Fetches the list of features for this suspect
    QVector<FeaturePtr> features();

    /// Sets the histogram for this suspect
    void setHistogram( HistogramPtr histogram );

    /// Fetches the histogram fom this suspect
    HistogramPtr histogram();

    /// Sets the classification vector for this suspect
    void setClassification( const QVector<double>& classification );

    /// Fetches the category vector from this suspect
    const QVector<double>& classification() const;

    /// Fetches the actual category of this Suspect
    int realCategory();

    /// Gets the predicted category of this Suspect
    int predCategory();

};

typedef QSharedPointer<Suspect> SuspectPtr;

} // namespace hsom
